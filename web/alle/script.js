// ****************** //
//       ETAPPER      //
// ****************** //
const etappe_1_coordinates =  [[10.374591, 63.431215], [10.374649, 63.431217], [10.37472, 63.431219], [10.37479, 63.43122], [10.374858, 63.431221], [10.374977, 63.43122], [10.375096, 63.431224], [10.375208, 63.431227], [10.375262, 63.43123], [10.375382, 63.431233], [10.375549, 63.431234], [10.375664, 63.431231], [10.375887, 63.431233], [10.375946, 63.431235], [10.37606, 63.431237], [10.376278, 63.431238], [10.37645, 63.431233], [10.376553, 63.431235], [10.376774, 63.431242], [10.377041, 63.431273], [10.377344, 63.431321], [10.377397, 63.43133], [10.377707, 63.431391], [10.37797, 63.431447], [10.378021, 63.43146], [10.378204, 63.431565], [10.378266, 63.43161], [10.378298, 63.431632], [10.378462, 63.431742], [10.37849, 63.431758], [10.378563, 63.431812], [10.37868, 63.431888], [10.378847, 63.431995], [10.378923, 63.432026], [10.379047, 63.432064], [10.379175, 63.432105], [10.379432, 63.432183], [10.379519, 63.432212], [10.379563, 63.432226], [10.379895, 63.432254], [10.380078, 63.432265], [10.38038, 63.432273], [10.380546, 63.432275], [10.380819, 63.432274], [10.380978, 63.432279], [10.381213, 63.432315], [10.381429, 63.432409], [10.381624, 63.432516], [10.381659, 63.432567], [10.381807, 63.432686], [10.3819, 63.432721], [10.382228, 63.432804], [10.382335, 63.432823], [10.382661, 63.432888], [10.382762, 63.432915], [10.383052, 63.432998], [10.383099, 63.433009], [10.383337, 63.433068], [10.383487, 63.433112], [10.383797, 63.433182], [10.383997, 63.433229], [10.384317, 63.433311], [10.38437, 63.433328], [10.384679, 63.433421], [10.384827, 63.433465], [10.385126, 63.433543], [10.385271, 63.433588], [10.385367, 63.433623], [10.38566, 63.433719], [10.385755, 63.433752], [10.386041, 63.433846], [10.386231, 63.433917], [10.386517, 63.434022], [10.386711, 63.434089], [10.386992, 63.434187], [10.387043, 63.434205], [10.387287, 63.434292], [10.387476, 63.43436], [10.387621, 63.434406], [10.387919, 63.434508], [10.388205, 63.434598], [10.388302, 63.434628], [10.38858, 63.434723], [10.388677, 63.434759], [10.388949, 63.434845], [10.389091, 63.434893], [10.389382, 63.434996], [10.389473, 63.435032], [10.389718, 63.435109], [10.389862, 63.435152], [10.390147, 63.435246], [10.390252, 63.43528], [10.390554, 63.435382], [10.390658, 63.435418], [10.390808, 63.435463], [10.390956, 63.435513], [10.391003, 63.435527], [10.391294, 63.435617], [10.391428, 63.435653], [10.391505, 63.435675], [10.391717, 63.43573], [10.391803, 63.435754], [10.392107, 63.435843], [10.392152, 63.435857], [10.392459, 63.435951], [10.392621, 63.435999], [10.392926, 63.436089], [10.392981, 63.436107], [10.393329, 63.436215], [10.393387, 63.436233], [10.39345, 63.436248], [10.393742, 63.436325], [10.393851, 63.436351], [10.394118, 63.436409], [10.394447, 63.436492], [10.394501, 63.436505], [10.394818, 63.436602], [10.394929, 63.436629], [10.395257, 63.436718], [10.39531, 63.436732], [10.39565, 63.43682], [10.395759, 63.436849], [10.39607, 63.436948], [10.396195, 63.437086], [10.396227, 63.437111], [10.396351, 63.437176], [10.396399, 63.437195], [10.396489, 63.437232], [10.396761, 63.43735], [10.396858, 63.437386], [10.397143, 63.437497], [10.39719, 63.437521], [10.397473, 63.437636], [10.397621, 63.437699], [10.39791, 63.437805], [10.398093, 63.437877], [10.398367, 63.437985], [10.398459, 63.438028], [10.398746, 63.438137], [10.398843, 63.438176], [10.399158, 63.438269], [10.399204, 63.438284], [10.399474, 63.438407], [10.399565, 63.438443], [10.399753, 63.438533], [10.399912, 63.438588], [10.400211, 63.438698], [10.400305, 63.438735], [10.400584, 63.43884], [10.400683, 63.438876], [10.400853, 63.438927], [10.400848, 63.438927]];
const etappe_1_distance_array = [0, 2, 6, 9, 13, 19, 25, 30, 33, 39, 47, 53, 64, 67, 73, 84, 92, 98, 109, 122, 138, 141, 158, 173, 176, 191, 196, 199, 214, 216, 223, 234, 248, 253, 261, 269, 284, 290, 292, 309, 318, 333, 342, 355, 363, 376, 391, 406, 412, 427, 433, 452, 458, 476, 482, 499, 501, 515, 524, 541, 553, 571, 574, 593, 602, 619, 628, 634, 652, 658, 676, 688, 707, 719, 737, 740, 755, 768, 776, 795, 813, 818, 836, 842, 859, 868, 886, 892, 907, 916, 934, 940, 959, 965, 974, 984, 987, 1004, 1012, 1017, 1029, 1034, 1052, 1055, 1073, 1083, 1101, 1105, 1126, 1129, 1133, 1150, 1156, 1171, 1190, 1193, 1212, 1218, 1237, 1240, 1260, 1266, 1285, 1302, 1305, 1315, 1318, 1324, 1343, 1349, 1368, 1372, 1391, 1401, 1419, 1432, 1450, 1456, 1475, 1482, 1501, 1503, 1523, 1529, 1542, 1552, 1572, 1578, 1596, 1603, 1609];
const etappe_1_altitude_array = [6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 11, 11, 10, 10, 10, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];
const etappe_1_last_index = etappe_1_distance_array.length - 1;

const etappe_2_coordinates = [[10.400787, 63.438843], [10.400787, 63.43884], [10.400861, 63.438883], [10.400915, 63.438912], [10.401104, 63.439033], [10.401162, 63.439067], [10.401309, 63.439133], [10.401405, 63.439177], [10.40155, 63.439225], [10.401736, 63.43927], [10.40191, 63.439273], [10.402195, 63.43932], [10.402407, 63.439439], [10.402426, 63.439467], [10.402654, 63.439574], [10.402838, 63.439649], [10.402957, 63.439702], [10.403044, 63.439734], [10.403256, 63.439815], [10.403572, 63.439923], [10.403626, 63.439939], [10.40398, 63.439948], [10.404204, 63.43988], [10.404245, 63.439858], [10.404428, 63.439815], [10.404483, 63.439829], [10.404584, 63.439863], [10.404833, 63.43989], [10.404995, 63.439862], [10.405173, 63.439846], [10.405536, 63.439748], [10.405601, 63.439637], [10.405679, 63.439473], [10.405924, 63.439335], [10.405966, 63.439313], [10.406232, 63.439184], [10.406308, 63.439144], [10.406542, 63.439026], [10.406582, 63.439001], [10.406827, 63.438871], [10.406869, 63.43885], [10.407114, 63.438717], [10.407235, 63.438659], [10.407547, 63.438557], [10.407897, 63.438476], [10.407963, 63.438428], [10.408032, 63.43834], [10.408065, 63.438316], [10.408255, 63.438262], [10.408372, 63.438242], [10.408715, 63.438183], [10.408938, 63.438141], [10.409105, 63.438113], [10.409463, 63.438046], [10.409632, 63.438021], [10.409962, 63.437956], [10.410073, 63.437937], [10.410411, 63.437877], [10.410633, 63.437833], [10.410983, 63.437773], [10.411225, 63.437732], [10.4116, 63.437667], [10.411714, 63.437655], [10.412098, 63.437619], [10.41232, 63.437609], [10.412509, 63.437604], [10.412875, 63.437596], [10.413281, 63.437616], [10.41335, 63.43762], [10.413708, 63.437625], [10.413768, 63.437625], [10.414022, 63.43764], [10.414274, 63.437668], [10.414565, 63.43776], [10.414863, 63.437857], [10.414907, 63.437877], [10.41509, 63.438017], [10.415125, 63.438041], [10.415226, 63.438076], [10.415355, 63.438091], [10.415675, 63.438061], [10.416016, 63.437962], [10.416111, 63.437939], [10.416454, 63.437879], [10.416563, 63.437865], [10.416824, 63.437799], [10.4169, 63.437719], [10.417009, 63.437577], [10.417128, 63.437395], [10.41714, 63.43737], [10.417253, 63.437226], [10.417281, 63.437201], [10.417444, 63.437042], [10.417503, 63.436995], [10.417674, 63.436962], [10.417984, 63.436975], [10.418143, 63.436981], [10.418467, 63.436982], [10.418519, 63.436983], [10.418731, 63.436997], [10.418864, 63.437005], [10.418973, 63.437007], [10.419337, 63.437031], [10.41956, 63.437051], [10.419622, 63.437074], [10.419862, 63.4372], [10.419994, 63.437284], [10.420171, 63.437381], [10.420304, 63.437491], [10.420368, 63.437549], [10.42061, 63.437669], [10.420651, 63.43769], [10.420842, 63.437803], [10.420878, 63.437823], [10.420947, 63.437859], [10.421179, 63.437986], [10.42129, 63.438044], [10.421476, 63.438158], [10.421676, 63.438268], [10.421752, 63.438303], [10.421976, 63.438405], [10.422079, 63.43847], [10.422313, 63.43861], [10.422382, 63.438652], [10.422593, 63.438779], [10.422696, 63.438845], [10.422914, 63.438975], [10.423067, 63.439077], [10.423276, 63.439202], [10.423348, 63.439245], [10.423583, 63.439373], [10.42368, 63.439422], [10.423855, 63.43949], [10.423998, 63.439543], [10.424219, 63.439656], [10.424253, 63.439677], [10.424431, 63.439819], [10.424503, 63.439885], [10.424672, 63.44003], [10.424734, 63.440081], [10.424901, 63.440233], [10.424932, 63.440257], [10.425101, 63.440397], [10.425283, 63.440541], [10.425344, 63.440585], [10.425526, 63.440714], [10.425601, 63.440779], [10.425673, 63.440888], [10.425698, 63.440945], [10.425791, 63.441105], [10.425835, 63.441152], [10.425992, 63.441336], [10.42607, 63.441398], [10.426209, 63.441581], [10.426225, 63.441608], [10.426392, 63.44175], [10.42642, 63.44177], [10.426591, 63.441886], [10.426639, 63.44193], [10.426832, 63.442067], [10.426868, 63.44209], [10.426987, 63.442118], [10.427192, 63.442119], [10.427299, 63.442209], [10.42733, 63.442356], [10.427309, 63.442401], [10.427289, 63.442547], [10.427289, 63.442576], [10.427268, 63.442731], [10.427276, 63.442788], [10.427301, 63.442964], [10.427328, 63.443072], [10.42742, 63.443138], [10.427471, 63.443149], [10.427757, 63.443164], [10.428118, 63.443184], [10.428297, 63.443199], [10.42835, 63.443211], [10.428497, 63.443248], [10.428858, 63.443291], [10.428909, 63.443303], [10.429226, 63.443376], [10.429458, 63.443485], [10.429685, 63.443535], [10.429729, 63.443556], [10.430034, 63.443591], [10.430096, 63.443603], [10.43038, 63.443669], [10.430537, 63.443682], [10.43077, 63.443697], [10.430927, 63.443694], [10.431012, 63.443693], [10.431048, 63.443703], [10.431233, 63.443768], [10.431562, 63.443815], [10.431661, 63.443813], [10.431714, 63.44381], [10.43183, 63.443801], [10.431939, 63.443811], [10.432118, 63.443825], [10.432456, 63.443876], [10.432575, 63.443886], [10.432935, 63.44391], [10.433294, 63.443941], [10.433351, 63.443948], [10.433687, 63.443977], [10.43381, 63.443981], [10.434163, 63.443997], [10.434349, 63.443991], [10.434482, 63.443986], [10.434841, 63.443979], [10.434956, 63.443977], [10.435319, 63.443977], [10.435444, 63.443977], [10.435774, 63.443972], [10.435817, 63.443968], [10.435942, 63.44392], [10.43607, 63.443911], [10.436416, 63.443856], [10.436786, 63.443806], [10.437091, 63.443766], [10.437474, 63.443698], [10.437536, 63.443688], [10.437712, 63.443653], [10.437828, 63.443631], [10.437951, 63.44361], [10.438186, 63.44357], [10.438236, 63.443558], [10.438286, 63.443545], [10.438334, 63.443532], [10.438494, 63.443492], [10.438712, 63.443443], [10.438764, 63.443427], [10.438821, 63.443412], [10.438927, 63.443384], [10.438982, 63.44337], [10.439084, 63.443339], [10.439132, 63.443325], [10.439181, 63.443314], [10.439383, 63.443255], [10.439681, 63.443155], [10.439784, 63.443127], [10.43987, 63.443096]];
const etappe_2_distance_array = [0, 0, 6, 10, 27, 31, 42, 49, 58, 68, 77, 92, 109, 112, 129, 141, 149, 155, 169, 189, 192, 210, 223, 226, 237, 240, 246, 259, 268, 277, 298, 311, 329, 349, 352, 372, 378, 395, 399, 418, 421, 440, 449, 468, 488, 494, 505, 508, 519, 525, 543, 556, 564, 584, 593, 611, 617, 635, 647, 666, 679, 699, 704, 724, 735, 745, 763, 783, 787, 805, 808, 820, 833, 851, 870, 873, 891, 894, 900, 907, 923, 944, 949, 967, 973, 988, 998, 1014, 1036, 1038, 1055, 1059, 1078, 1084, 1093, 1109, 1117, 1133, 1136, 1146, 1153, 1158, 1177, 1188, 1192, 1211, 1222, 1236, 1250, 1257, 1275, 1278, 1294, 1297, 1302, 1321, 1329, 1345, 1361, 1366, 1382, 1391, 1410, 1416, 1434, 1443, 1461, 1475, 1492, 1498, 1517, 1524, 1535, 1545, 1561, 1564, 1582, 1591, 1609, 1615, 1634, 1637, 1655, 1673, 1679, 1696, 1704, 1717, 1724, 1742, 1748, 1770, 1778, 1799, 1802, 1820, 1823, 1838, 1844, 1862, 1865, 1872, 1882, 1893, 1910, 1915, 1931, 1934, 1952, 1958, 1978, 1990, 1998, 2001, 2016, 2034, 2043, 2046, 2054, 2073, 2076, 2094, 2110, 2123, 2126, 2142, 2145, 2161, 2169, 2181, 2189, 2193, 2195, 2207, 2224, 2229, 2232, 2238, 2243, 2252, 2270, 2276, 2294, 2312, 2315, 2332, 2339, 2356, 2366, 2372, 2390, 2396, 2414, 2420, 2437, 2439, 2447, 2454, 2472, 2491, 2507, 2528, 2531, 2541, 2547, 2553, 2566, 2569, 2572, 2575, 2584, 2596, 2599, 2602, 2608, 2612, 2618, 2621, 2623, 2635, 2654, 2660, 2665];
const etappe_2_altitude_array = [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 6, 6, 6, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 11, 10, 11, 10, 11, 11, 10, 11, 10, 11, 10, 11, 10, 11, 12, 12, 12, 12];
const etappe_2_last_index = etappe_1_last_index + (etappe_2_distance_array.length - 1);

const total_coordinate_array = [...etappe_1_coordinates, ...etappe_2_coordinates];
const total_elevation_array = [...etappe_1_altitude_array, ...etappe_2_altitude_array];


// Distance array needs to add previous distance from earlier etappe, which is what we are doing here
var all_distance_arrays = [etappe_1_distance_array, etappe_2_distance_array];
var total_distance_array = [];

for (var i=0; i<etappe_1_distance_array.length; i++) {
  total_distance_array.push(etappe_1_distance_array[i])
}

for (var i=0; i<etappe_2_distance_array.length; i++) {
  total_distance_array.push(etappe_1_distance_array[etappe_1_distance_array.length-1]+etappe_2_distance_array[i])

}

// ********** //
// ETAPPERUTE //
// ********** //

// Default aktiv etappe on load
var aktivEtappe = "Promenaden";

mapboxgl.accessToken = 'pk.eyJ1IjoibWFya3VzdmhhZ2VuIiwiYSI6ImNtZ2NlNjNrbjE0bzkybHI1ZmM3MjV3aTEifQ.BE1AT8J3W1peoFGt4LOxOw';
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v9',
        center: [10.379895, 63.432254],
        zoom: 12
    });

    map.on('load', () => {

        // **** ETAPPE 1 **** //
            map.addSource('etappe1', {
                'type': 'geojson',
                'data': {
                    'type': 'Feature',
                    'properties': {},
                    'geometry': {
                        'type': 'LineString',
                        'coordinates': etappe_1_coordinates
                    }
                }
            });

            map.addLayer({
                'id': 'etappe1',
                'type': 'line',
                'source': 'etappe1',
                'layout': {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                'paint': {
                    'line-color': 'red',
                    'line-width': 5
                }
            });


            // **** ETAPPE 2 **** //
                map.addSource('etappe2', {
                    'type': 'geojson',
                    'data': {
                        'type': 'Feature',
                        'properties': {},
                        'geometry': {
                            'type': 'LineString',
                            'coordinates': etappe_2_coordinates
                        }
                    }
                });

                map.addLayer({
                    'id': 'etappe2',
                    'type': 'line',
                    'source': 'etappe2',
                    'layout': {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    'paint': {
                        'line-color': 'red',
                        'line-width': 5
                    }
                });


            // Moving circle
            map.addSource('circle-center', {
                type: 'geojson',
                data: {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: total_coordinate_array[0]
                    },
                    properties: {}
                }
            });

            map.addLayer({
              id: 'my-circle',
              type: 'circle',
              source: 'circle-center',
              paint: {
                  'circle-radius': 10, // Radius in pixels
                  'circle-color': '#FF0000', // Red color
                  'circle-opacity': 0.8 // Semi-transparent
              }
            });
        });


// ********* //
// HØYDEKART //
// ********* //

Chart.register( Chart.LineElement, Chart.LineController, Chart.Legend, Chart.Tooltip, Chart.LinearScale, Chart.PointElement, Chart.Filler, Chart.Title);

const ctx = document.getElementById("route-elevation-chart").getContext("2d");
const chartData = {
    labels: total_distance_array,
    datasets: [{
      data: total_elevation_array,
      fill: true,
      borderColor: 'red',
      backgroundColor: 'rgba(255, 0, 0, .3)',
      tension: 0.1,
      pointRadius: 0,
      spanGaps: true
    }]
  };

  const config = {
    type: 'line',
    data: chartData,
    plugins: [{
      beforeInit: (chart, args, options) => {
        const maxHeight = Math.max(...chart.data.datasets[0].data);
        chart.options.scales.x.min = Math.min(...chart.data.labels);
        chart.options.scales.x.max = Math.max(...chart.data.labels);
        chart.options.scales.y.max = maxHeight + Math.round(maxHeight * 0.2);
        chart.options.scales.y1.max = maxHeight + Math.round(maxHeight * 0.2);
      }
    }],
    options: {
      onHover: (event, chartElements) => {
        // Capture index of current point being hovered
        if (chartElements.length) {
          const { datasetIndex, index } = chartElements[0];
          // Draw circle
          map.getSource('circle-center').setData({
                type: 'Feature',
                geometry: {
                    type: 'Point',
                    coordinates: total_coordinate_array[index] // New coordinates
                },
                properties: {}
            });
        }
      },
      animation: false,
      maintainAspectRatio: false,
      interaction: { intersect: false, mode: 'index' },
      tooltip: { position: 'nearest' },
      scales: {
        x: { type: 'linear' },
        y: { type: 'linear', beginAtZero: true },
        y1: { type: 'linear', display: true, position: 'right', beginAtZero: true, grid: { drawOnChartArea: false }},
      },
      plugins: {
        annotation: {
                    annotations: {
                        etappe1Line:{
                          type: 'line',
                          mode: 'vertical',
                          scaleID: 'x',
                          value: total_distance_array[0],
                          borderColor: 'purple',
                          borderWidth: 6,
                          label: {
                              display: true,
                              content: 'Etappe 1',
                              enabled: true,
                              position: 'start',
                              xAdjust: 4,
                              yAdjust: -4,
                              backgroundColor: 'rgba(132, 50, 20, 0.7)',
                              font: {
                                  size: 12
                              }
                          }
                        },

                        etappe2Line: {
                            type: 'line',
                            mode: 'vertical',
                            scaleID: 'x',
                            value: total_distance_array[etappe_1_last_index+1],
                            borderColor: 'purple',
                            borderWidth: 3,
                            label: {
                                display: true,
                                content: 'Etappe 2',
                                enabled: true,
                                position: 'start',
                                xAdjust: 38,
                                yAdjust: -4,
                                backgroundColor: 'rgba(132, 50, 20, 0.7)',
                                font: {
                                    size: 12
                                }
                            }
                        }
                    }
                },
        title: { align: "end", display: true, text: "Distanse, m / Høydemeter, m" },
        legend: { display: false },
        tooltip: {
          displayColors: false,
          callbacks: {
            title: (tooltipItems) => {
              return "Distanse løpt: " + tooltipItems[0].label + 'm'
            },
            label: (tooltipItem) => {
              return "Høydemeter: " + tooltipItem.raw + 'm'
            },
          }
        }
      }
    }
  };

const chart = new Chart(ctx, config);



// *************** //
// EVENT-LISTENERS //
// *************** //
function distBetweenCoords(coord1, coord2) {
  xDiff = Math.abs(coord2[0]-coord1[0]);
  yDiff = Math.abs(coord2[1]-coord1[1]);
  return xDiff + yDiff;
}


map.on("mousemove", (e) => {
  var activeCoord = [parseFloat(JSON.stringify(e.lngLat.lng)), parseFloat(JSON.stringify(e.lngLat.lat))];

  // Now we find closest coordinate in total_coordinate_array. We also store its index in the array for later.
  var closestCoord = [0,0]
  var index = 0;
  for (var i = 0; i < total_coordinate_array.length; i++) {
    if (distBetweenCoords(closestCoord, activeCoord) > distBetweenCoords(activeCoord,total_coordinate_array[i])) {
      closestCoord = total_coordinate_array[i]
      index = i;
    }
  }

  // Decide what etappe is active
  if (index <= etappe_1_last_index) {
    document.getElementById("etappe").innerHTML = "Promenaden";
    document.getElementById("etappeFraTil").innerHTML = "Skansenparken – Rockheim Park";
    document.getElementById("etappeInfo").innerHTML = "1609m &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; Flat";
  }
  else if (index <= etappe_2_last_index) {
    document.getElementById("etappe").innerHTML = "Rockheim";
    document.getElementById("etappeFraTil").innerHTML = "Rockheim Park - Dakotaparken";
    document.getElementById("etappeInfo").innerHTML = "2590m &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; Flat med slak stigning til veksling";
  }

  // Let us move the red point on the map accordingly to where the cursor is
  map.getSource('circle-center').setData({
        type: 'Feature',
        geometry: {
            type: 'Point',
            coordinates: total_coordinate_array[index] // New coordinates
        },
        properties: {}
    });

  // Now we pass this information to the altitude map
  const pointIndex = index;
  const datasetIndex = 0;
  const meta = chart.getDatasetMeta(datasetIndex);
  const point = meta.data[pointIndex];

  chart.tooltip.setActiveElements(
    [{ datasetIndex, index: pointIndex }],
    { x: point.x, y: point.y }
  );
  chart.update();
});
